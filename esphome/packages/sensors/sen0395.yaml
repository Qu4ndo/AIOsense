uart:
  id: uart_bus
  tx_pin: "${uart_tx_pin}"
  rx_pin: "${uart_rx_pin}"
  baud_rate: 115200

esphome:
  includes:
    - sen0395_distance.h

custom_component:
  - lambda: |-
      auto my_custom = new Sen0395Distance(id(uart_bus));
      return {my_custom};

sensor:
  - platform: template
    name: Target 1 Distance # Don't change
    id: target_distance_1_m
    accuracy_decimals: 2
    disabled_by_default: false
  - platform: template
    name: Target 2 Distance # Don't change
    id: target_distance_2_m
    accuracy_decimals: 2
    disabled_by_default: True
  - platform: template
    name: Target 3 Distance # Don't change
    id: target_distance_3_m
    accuracy_decimals: 2
    disabled_by_default: True
  - platform: template
    name: Target 4 Distance # Don't change
    id: target_distance_4_m
    accuracy_decimals: 2
    disabled_by_default: True
  - platform: template
    name: "Target 1 SNR" # Don't change
    disabled_by_default: True
  - platform: template
    name: "Target 2 SNR" # Don't change
    disabled_by_default: True
  - platform: template
    name: "Target 3 SNR" # Don't change
    disabled_by_default: True
  - platform: template
    name: "Target 4 SNR" # Don't change
    disabled_by_default: True

binary_sensor:
  - platform: gpio
    name: "mmWave"
    id: motion_mmwave
    device_class: occupancy
    pin:
      number: "${sen0395_io_pin}"
      mode: INPUT_PULLDOWN

  - platform: template
    name: "Target 1 Active" # Don't change
    disabled_by_default: False

  - platform: template
    name: "Target 2 Active" # Don't change
    disabled_by_default: True

  - platform: template
    name: "Target 3 Active" # Don't change
    disabled_by_default: True

  - platform: template
    name: "Target 4 Active" # Don't change
    disabled_by_default: True

switch:
  - platform: template
    name: "mmWave Sensor"
    id: "mmwave_sensor"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    assumed_state: true
    turn_on_action:
      - uart.write: "sensorStart"
      - delay: 1s
    turn_off_action:
      - uart.write: "sensorStop"
      - delay: 1s

  - platform: template
    name: "mmWave LED"
    id: "mmwave_led"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    assumed_state: true
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: UART target output
    id: uart_target_output
    entity_category: config
    internal: false
    optimistic: true
    assumed_state: false
    restore_mode: ALWAYS_ON
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 2 1 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setUartOutput 2 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

number:
  - platform: template
    id: mmwave_zone_1_start
    name: mmWave Zone 1 Start
    min_value: 0
    max_value: 800
    step: 15
    initial_value: 0
    mode: slider
    unit_of_measurement: cm
    optimistic: true
    entity_category: config
    disabled_by_default: False
    icon: "mdi:arrow-left-right"

  - platform: template
    id: mmwave_zone_1_end
    name: mmWave Zone 1 End
    min_value: 0
    max_value: 800
    step: 15
    initial_value: 315
    mode: slider
    unit_of_measurement: cm
    optimistic: true
    entity_category: config
    disabled_by_default: False
    icon: "mdi:arrow-left-right"

  - platform: template
    id: mmwave_zone_2_start
    name: mmWave Zone 2 Start
    min_value: 0
    max_value: 800
    step: 15
    initial_value: 0
    mode: slider
    unit_of_measurement: cm
    optimistic: true
    entity_category: config
    disabled_by_default: True
    icon: "mdi:arrow-left-right"

  - platform: template
    id: mmwave_zone_2_end
    name: mmWave Zone 2 End
    min_value: 0
    max_value: 800
    step: 15
    initial_value: 0
    mode: slider
    unit_of_measurement: cm
    optimistic: true
    entity_category: config
    disabled_by_default: True
    icon: "mdi:arrow-left-right"

  - platform: template
    id: mmwave_zone_3_start
    name: mmWave Zone 3 Start
    min_value: 0
    max_value: 800
    step: 15
    initial_value: 0
    mode: slider
    unit_of_measurement: cm
    optimistic: true
    entity_category: config
    disabled_by_default: True
    icon: "mdi:arrow-left-right"

  - platform: template
    id: mmwave_zone_3_end
    name: mmWave Zone 3 End
    min_value: 0
    max_value: 800
    step: 15
    initial_value: 0
    mode: slider
    unit_of_measurement: cm
    optimistic: true
    entity_category: config
    disabled_by_default: True
    icon: "mdi:arrow-left-right"

  - platform: template
    id: mmwave_zone_4_start
    name: mmWave Zone 4 Start
    min_value: 0
    max_value: 800
    step: 15
    initial_value: 0
    mode: slider
    unit_of_measurement: cm
    optimistic: true
    entity_category: config
    disabled_by_default: True
    icon: "mdi:arrow-left-right"

  - platform: template
    id: mmwave_zone_4_end
    name: mmWave Zone 4 End
    min_value: 0
    max_value: 800
    step: 15
    initial_value: 0
    mode: slider
    unit_of_measurement: cm
    optimistic: true
    entity_category: config
    disabled_by_default: True
    icon: "mdi:arrow-left-right"

  - platform: template
    name: "mmWave Distance"
    id: mmwave_distance
    entity_category: config
    min_value: 0
    max_value: 800
    initial_value: 315
    optimistic: true
    step: 50
    restore_value: true
    unit_of_measurement: cm
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda int cm = (int)ceil(x / 15.0);
          std::string cms = "detRangeCfg -1 0 " + to_string(cm);
          return std::vector<unsigned char>(cms.begin(), cms.end());
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: "mmWave Off Latency"
    id: mmwave_latency
    entity_category: config
    min_value: 0
    max_value: 65000
    initial_value: 12500
    optimistic: true
    step: 25
    restore_value: true
    unit_of_measurement: ms
    mode: box
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda int ms = (int)ceil(x / 25.0);
          std::string mss = "outputLatency -1 0 " + to_string(ms);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: "mmWave Sensitivity"
    id: mmwave_sensitivity
    entity_category: config
    min_value: 0
    max_value: 9
    initial_value: 7
    optimistic: true
    step: 1
    restore_value: true
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write:
          !lambda std::string mss = "setSensitivity " + to_string((int)x);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

button:
  - platform: template
    name: "mmWave Factory Reset"
    entity_category: config
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "resetCfg"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: mmWave Set Distance
    id: mmwave_set_distance
    icon: "mdi:arrow-left-right"
    entity_category: config
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          int s1 = (int)ceil(id(mmwave_zone_1_start).state / 15.0);
          int e1 = (int)ceil(id(mmwave_zone_1_end).state / 15.0);
          int s2 = (int)ceil(id(mmwave_zone_2_start).state / 15.0);
          int e2 = (int)ceil(id(mmwave_zone_2_end).state / 15.0);
          int s3 = (int)ceil(id(mmwave_zone_3_start).state / 15.0);
          int e3 = (int)ceil(id(mmwave_zone_3_end).state / 15.0);
          int s4 = (int)ceil(id(mmwave_zone_4_start).state / 15.0);
          int e4 = (int)ceil(id(mmwave_zone_4_end).state / 15.0);
          
          std::string cmd = "detRangeCfg -1";
          
          if(s1 < e1) {
          cmd += " " + to_string(s1) + " " + to_string(e1);
          }
          if(s2 > e1 && s2 < e2) {
          cmd += " " + to_string(s2) + " " + to_string(e2);
          }
          if(s3 > e2 && s3 < e3) {
          cmd += " " + to_string(s3) + " " + to_string(e3);
          }
          if(s4 > e3 && s4 < e4) {
          cmd += " " + to_string(s4) + " " + to_string(e4);
          }
          
          if(cmd != "detRangeCfg -1") {
          std::vector<unsigned char> cmd_vec(cmd.begin(), cmd.end());
          ESP_LOGI("set_mmwave_distance", "Sending command to sensor %s", cmd.c_str());
          id(distance_zone_status).publish_state("Successfully sent to sensor! " + cmd.substr(14));
          return cmd_vec;
          } else {
          ESP_LOGE("set_mmwave_distance", "No valid segments configured. Please adjust the sliders.");
          id(distance_zone_status).publish_state("No valid segments configured. Please adjust the sliders.");
          return std::vector<unsigned char>();
          }
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

text_sensor:
  - platform: template
    name: "Distance Zones Status"
    id: "distance_zone_status"